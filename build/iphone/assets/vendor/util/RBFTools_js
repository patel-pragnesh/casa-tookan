
module.exports=function(){

function RBFTools(){}































function RBFTools(){}

function inputBytes(input){
return TX_INPUT_BASE+(input.script?input.script.length:TX_INPUT_PUBKEYHASH);
}
function outputBytes(output){
return TX_OUTPUT_BASE+(output.script?output.script.length:TX_OUTPUT_PUBKEYHASH);
}

function getUserAddressFromTx(tx){
var addresses=[];













return tx.ins.forEach(function(input,idx){var scriptSig=bitcoin.script.compile([input.script]),asm=bitcoin.script.toASM(scriptSig),pubkey=asm.substr(asm.length-66),pubKeyBuffer=tools.buffer(pubkey,'hex'),address=bitcoin.ECPair.fromPublicKeyBuffer(pubKeyBuffer).getAddress();addresses.push(address)}),addresses[0];
}

function selectInputsAndChange(newSatByte,utxos){

var updated=(oldFee+changeAmount)/(oldSize-sizeOfChangeOutput);
console.log('ud:'+updated+' old:'+oldFeeSatByte);
var dif=updated-oldFeeSatByte;
console.log('dif:'+dif);
var currentSatByteEst=oldFeeSatByte,

requiredSatByteEst=newSatByte,

newInputs=[];

console.log('oldFeeSatByte:'+currentSatByteEst+' requiredSizeByteEst:'+requiredSatByteEst);

var updatedSize=oldSize,
updatedFee=oldFee,

updatedSatByteEst=updatedFee/updatedSize+dif;

console.log('updatedSatByte:'+updatedSatByteEst.toFixed(4)+' requiredSizeByteEst:'+requiredSatByteEst);

for(var

aUTXO,i=0;i<utxos.length;i++)aUTXO=utxos[i],

aUTXO.sizeValRatio=1e8*aUTXO.amount/sizeOf1Input;


utxos=utxos.sort(function(a,b){
return a.sizeValRatio-b.sizeValRatio;
});

var newSetFee=requiredSatByteEst*oldSize,

reduceChangeAmount=newSetFee-oldFee;

console.log('reduceChangeAmount:'+reduceChangeAmount);

var foundChange=!1,
updatedViaChange=!1,
removeChange=-1;



























if(newTx.tx.outs.forEach(function(output,idx){var type=bitcoin.script.classifyOutput(output.script);if('pubkeyhash'==type){var add=bitcoin.address.fromOutputScript(output.script);if(add==sourceAddress&&!1==foundChange){foundChange=!0;var tmpVal=output.value-reduceChangeAmount;console.log('new change val :'+tmpVal),0==tmpVal?(updatedViaChange=!0,removeChange=idx):0<tmpVal&&(output.value-=reduceChangeAmount,updatedViaChange=!0)}}}),-1!=removeChange&&newTx.tx.outs.splice(removeChange,1),!1==updatedViaChange){

for(var

aUTXO,i=0;i<utxos.length;i++)
if(aUTXO=utxos[i],0!=aUTXO.confirmations)


if(!(updatedSatByteEst<=requiredSatByteEst))





















break;else if(-1==includedInputs.indexOf(aUTXO.txid+':'+aUTXO.vout)&&aUTXO.txid!=oldTxid){var anAmount=1e8*aUTXO.amount;inputAmounts+=anAmount,updatedSize+=sizeOf1Input,updatedFee+=anAmount,updatedSatByteEst=updatedFee/updatedSize,newInputs.push(aUTXO),console.log('oldSize:'+oldSize+' newSize:'+updatedSize),console.log('oldFee:'+oldFee+' newFee:'+updatedFee),console.log('updatedSatByte:'+updatedSatByteEst.toFixed(4)+' requiredSizeByteEst:'+requiredSatByteEst),console.log('  ')}



if(updatedSatByteEst<=requiredSatByteEst){
throw'balance error';
return;
}
}

newInputs.forEach(function(aUTXO){

newTx.addInput(aUTXO.txid,aUTXO.vout);
}),

newTx.tx.ins.forEach(function(input,idx){
input.sequence=4294967293;
});
}











function makeGetRequest(params,callback,error){

var xhr=Ti.Network.createHTTPClient();

xhr.open('GET',Alloy.CFG.api_uri+'v2/'+params,!0),
xhr.setRequestHeader('X-Api-Key',Alloy.Globals.api_key),
xhr.onload=function(e){

4===xhr.readyState&&(

200===xhr.status?

callback(xhr.responseText):

error(xhr.statusText));


},
xhr.onerror=function(e){
error(xhr.statusText);
},
xhr.send(null);
}

function getOutputAmount(rawtx,index){

var txObj=bitcoin.Transaction.fromHex(rawtx),

output=txObj.outs[index];

return output.value;
}






























function startGetUTXOAmounts(){

var utxo=spentUTXOSs[spentUTXOSs.length-1];
makeGetRequest('transactions/'+utxo.txid+'/raw',function callback(result){

var rawtx=JSON.parse(result),
rawtx=rawtx+'',
amount=getOutputAmount(rawtx,utxo.index);




if(inputAmounts+=amount,utxo.input.amount=amount,spentUTXOSs.splice(-1,1),0<spentUTXOSs.length)

startGetUTXOAmounts();else


try{
continueCheck();
}catch(e){
alert(e);
}

},function error(error){
console.log('error'),
startGetUTXOAmounts();
});
}

function getBinarySize(string){
return tools.buffer.byteLength(string,'hex');
}

































































function continueCheck(){

sourceAddress=getUserAddressFromTx(txObject),
console.log('sa:'+sourceAddress),

newTx.tx.outs=[],

txObject.outs.forEach(function(output,idx){

outputAmounts+=output.value,

newTx.tx.outs.push(output);
}),

console.log('output size'+sizeOfChangeOutput+' amount'+changeAmount),

oldFee=inputAmounts-outputAmounts,

oldFeeSatByte=oldFee/oldSize,

checkFeeCallback(!0,oldFee,oldFeeSatByte,currentRawTx);
}var txObject,newTx,sourceAddress,bumbFeeCallback,checkFeeCallback,currentRawTx,TX_EMPTY_SIZE=10,TX_INPUT_BASE=41,TX_INPUT_PUBKEYHASH=107,TX_OUTPUT_BASE=9,TX_OUTPUT_PUBKEYHASH=25,tools=require('vendor/util/bitcoinJSLib'),bitcoin=tools.bitcoin,crypto=bitcoin.crypto,UTXOSs=[],spentUTXOSs=[],inputAmount=0,outputAmounts=0,oldFee=0,increase=0,inputAmounts=0,changeAmount=0,includedInputs=[],oldTxid='',sizeOf1Input=0,sizeOfChangeOutput=0,oldSize=0,oldFeeSatByte=0;RBFTools.prototype.setRBF=function(tx){var txObj=bitcoin.Transaction.fromHex(tx);return txObj.ins.forEach(function(input,idx){input.sequence=4294967293}),txObj.toHex()};var getRawTx=function(txid){return new Promise(function(resolve,reject){makeGetRequest('transactions/'+txid+'/raw',function callback(result){try{var jsonString=JSON.parse(result);resolve(jsonString)}catch(e){throw e}},function error(error){console.log('errir '+error),resolve(null)})})},getUTXOS=function(address){return new Promise(function(resolve,reject){makeGetRequest('addresses/'+address+'/utxos',function callback(result){resolve(JSON.parse(result))},function error(error){reject(error)})})};RBFTools.prototype.getBuffer=function(){return tools.buffer},RBFTools.prototype.getBitcoin=function(){return bitcoin},RBFTools.prototype.checkRBF=function(txid,callback,errorCallback){oldTxid=txid,checkFeeCallback=callback,spentUTXOSs=[],includedInputs=[],inputAmounts=0,outputAmounts=0,fee=0;var isRBF=!1;getRawTx(txid).then(function(rawTx){if(null==rawTx)return void errorCallback('error please try again later');var rawTx=rawTx+'';return oldSize=getBinarySize(rawTx),currentRawTx=rawTx,txObject=bitcoin.Transaction.fromHex(rawTx),newTx=new bitcoin.TransactionBuilder,spentUTXOSs=[],txObject.ins.forEach(function(input,idx){sizeOf1Input=inputBytes(input),4294967293==input.sequence&&(isRBF=!0);var txid=tools.buffer(input.hash.reverse(),'hex').toString('hex');newTx.addInput(txid,input.index),includedInputs.push(txid+':'+input.index),spentUTXOSs.push({txid:txid,index:input.index,input:newTx.tx.ins[idx]})}),!1==isRBF?void callback(!1,null,null):void startGetUTXOAmounts()})};;





































return RBFTools.prototype.continueBump=function(newSatByte,callback){getUTXOS(sourceAddress).then(function(utxos){UTXOSs=utxos;try{selectInputsAndChange(newSatByte,UTXOSs)}catch(e){return void callback(null,e)}var newTxBuilt=newTx.buildIncomplete(),newOutputAmounts=0;newTxBuilt.outs.forEach(function(output,idx){newOutputAmounts+=output.value});var newFee=inputAmounts-newOutputAmounts;console.log(inputAmounts+' :: '+newOutputAmounts);try{var newHex=newTxBuilt.toHex();callback(newHex,null,newFee)}catch(e){callback(null,e,null)}})},new RBFTools;
}();