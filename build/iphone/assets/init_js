
globals=Alloy.Globals,
globals.isScrolling=!1,
globals.Accelerometer=0,
globals.reorgViews={};

var network=require("requires/network"),
util=require("requires/util"),
pubsub=require("requires/pubsub"),
cache=require("requires/cache"),

auth=require("requires/auth"),
blockchain=require("requires/blockchain"),
bitcoin=require("requires/bitcoin"),
ethereum=require("requires/ethereum");

globals.console={
info:function(str){
Alloy.CFG.isDevelopment&&Ti.API.info(str);
},
error:function(str){
Alloy.CFG.isDevelopment&&Ti.API.error(str);
},
warn:function(str){
Alloy.CFG.isDevelopment&&Ti.API.warn(str);
}},


globals.feeTexts={
fastestFee:L("label_priority_high"),
halfHourFee:L("label_priority_med"),
lowFee:L("label_priority_low")},


globals.display={
height:util.getDisplayHeight(),
width:util.getDisplayWidth()};


var touchPos,
enabledButton=!1;
globals.addButtonEvent=function(button,callback){var _Mathpow=






Math.pow;button.addEventListener("touchstart",function(e){touchPos={x:e.x,y:e.y},button.opacity=0.2,enabledButton=!0}),button.addEventListener("touchmove",function(e){var a=_Mathpow(touchPos.x-e.x,2)+_Mathpow(touchPos.y-e.y,2);
50<a&&(
button.animate({opacity:1,duration:200}),
enabledButton=!1);

}),
button.addEventListener("touchend",function(e){
button.animate({opacity:1,duration:200}),
enabledButton&&(
enabledButton=!1,
callback(e));

});
},

String.prototype.format=function(arg){
var rep_fn=null;
if("object"==typeof arg)rep_fn=function(m,k){
return arg[k];
};else{
var args=arguments;rep_fn=function(m,k){
return args[parseInt(k)];
};
}
return this.replace(/\{(\w+)\}/g,rep_fn);
},

String.prototype.rvew=function(bool){return(

void 0!=bool&&null!=bool&&bool?


this.replace(/token/g,"coin"):this.toString());
},

String.prototype.rvew2=function(bool){return(

void 0!=bool&&null!=bool&&bool?


this.replace(/bitcoin\ and\ tokens/g,"coins"):this.toString());
},

Number.prototype.toFixed2=function(digit){

return null==digit&&(digit=8),this.toFixed(digit).replace(/0+$/,"").replace(/\.$/,"");
},

Math._getDecimalLength=function(value){
var list=value.toString().split("."),
result=0;

return void 0!==list[1]&&0<list[1].length&&(result=list[1].length),result;
},

Math.multiply=function(value1,value2){var _Math_getDecimalLength=


Math._getDecimalLength,intValue1=parseInt(value1.toString().replace(".",""),10),intValue2=parseInt(value2.toString().replace(".",""),10),decimalLength=_Math_getDecimalLength(value1)+_Math_getDecimalLength(value2);
return intValue1*intValue2/Math.pow(10,decimalLength);
},

Math.divide=function(value1,value2){var _Math_getDecimalLength2=


Math._getDecimalLength,_Mathpow2=


Math.pow,intValue1=parseInt(value1.toString().replace(".",""),10),intValue2=parseInt(value2.toString().replace(".",""),10),len1=_Math_getDecimalLength2(value1),len2=_Math_getDecimalLength2(value2);




return len1>len2?intValue2*=_Mathpow2(10,len1-len2):len1<len2&&(intValue1*=_Mathpow2(10,len2-len1)),decimalLength=0<len1&&0<len2?0:len1+len2,(0==len1||0==len2)&&(decimalLength=0),intValue1/intValue2*_Mathpow2(10,decimalLength);
},

Math.subtract=function(value1,value2){var _Mathmultiply=


Math.multiply,_Math_getDecimalLength3=Math._getDecimalLength,max=Math.max(_Math_getDecimalLength3(value1),_Math_getDecimalLength3(value2)),k=Math.pow(10,max);return(_Mathmultiply(value1,k)-_Mathmultiply(value2,k))/k;
};

function reorg_finish(){
globals.isReorg&&(
globals.isReorg=!1,
globals.reorgViews.home.removeSelf());

};

var service=null;
globals.backgroundfetch=function(e){
network.connectGET({
chain:"btc",
version:"v1",
method:"status/reorg",
callback:function(result){
if(!!result.isReorg)
































null!=e&&Ti.App.iOS.endBackgroundHandler(e.handlerId);else if(reorg_finish(),!0){Ti.App.iOS.removeEventListener("backgroundfetch",globals.backgroundfetch);var notification=Ti.App.iOS.scheduleLocalNotification({alertBody:L("text_finish_reorg"),date:new Date(new Date().getTime())})}else if(null!=service){service.stop(),service=null;var intent=Ti.Android.createIntent({action:Ti.Android.ACTION_MAIN,className:"com.mandelduck.jiko.tookanWalletActivity",packageName:"com.mandelduck.jiko"});intent.flags|=Ti.Android.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED|Ti.Android.FLAG_ACTIVITY_SINGLE_TOP,intent.addCategory(Ti.Android.CATEGORY_LAUNCHER);var notification=Ti.Android.createNotification({contentTitle:"Casa Tookan",contentText:L("text_finish_reorg"),tickerText:L("text_finish_reorg"),contentIntent:Ti.Android.createPendingIntent({intent:intent}),defaults:Ti.Android.DEFAULT_ALL,flags:Ti.Android.FLAG_SHOW_LIGHTS,icon:Ti.App.Android.R.drawable.appicon,number:1,when:new Date});Ti.Android.NotificationManager.notify(1,notification)}
}});

},
globals.reorg_occured=function(){
if(!globals.isReorg)


if(globals.isReorg=!0,!0)
globals.reorgViews.home=util.setReorg(Ti.API.home_win),
globals.reorgViews.history=util.setReorg(Ti.API.history_win),
globals.reorgViews.dex=util.setReorg(Ti.API.exchange_win),
Ti.App.iOS.setMinimumBackgroundFetchInterval(Ti.App.iOS.BACKGROUNDFETCHINTERVAL_MIN),
Ti.App.iOS.addEventListener("backgroundfetch",globals.backgroundfetch);else
{
globals.reorgViews.home=util.setReorg(globals.main_window);
var intent=Ti.Android.createServiceIntent({url:"background/fetch.js"});
intent.putExtra("interval",15000),
service=Ti.Android.createService(intent),
service.start();
}

},

globals._parseCip2=function(url){
if(null==url||!url.match(/^counterparty:/))return null;
var scheme=url.replace(/^counterparty:/,"").split("?"),

data=null;
try{
var address=bitcoin.getAddressFromWIF(scheme[0]);
data={address:address,WIF:scheme[0]};
}catch(e){
globals.console.info(e),
data={address:scheme[0]};
}











return 1<scheme.length&&scheme[1].split("&").forEach(function(val){var v=val.split("=");try{data[v[0]]=decodeURIComponent(v[1])}catch(e){globals.console.info(e.error)}}),data;
};
function urlToObject(url){
var returnObj={};
url=url.replace("URLSCHEME://?","");
var params=url.split("&");




return params.forEach(function(param){var keyAndValue=param.split("=");returnObj[keyAndValue[0]]=decodeURI(keyAndValue[1])}),obj;
}

function loadingFromInit(){
if(null!=Ti.API.home_win)
return util.showLoading(Ti.API.home_win,{width:Ti.UI.FILL,height:Ti.UI.FILL,message:L("label_linking")});return(
null==globals.main_window?


null:util.showLoading(globals.main_window,{width:Ti.UI.FILL,height:Ti.UI.FILL,message:L("label_linking")}));
}

function signAndSendMessageTokenly(url){
var loading=loadingFromInit(),

scheme=url.split("?"),
msg=scheme[1];
msg=msg.replace("msg=","");

var sig=bitcoin.signMessage(msg),
client=Ti.Network.createHTTPClient({
onload:function(e){
null!=loading&&loading.removeSelf(),
util.createDialog({
title:L("text_tokenly_sent"),
message:L("text_tokenly_confirm"),
buttonNames:[L("label_ok")]}).
show();
},

onerror:function(e){
null!=loading&&loading.removeSelf();
var arr_from_json=JSON.parse(this.responseText);
arr_from_json.error==void 0?


alert(this.responseText):alert(arr_from_json.error);

},
timeout:15000});

client.open("POST",url),

client.send({
msg:msg,
address:cache.data.address,
sig:sig});

};

function publish(params,options,data){
globals.console.info(data),
globals.console.info(params.channel),
null!=data&&null!=params.channel&&(
loading=loadingFromInit(),
pubsub.publish({
channel:params.channel,
message:JSON.stringify(data),
callback:function(m){
globals.console.info("complete!"),
null!=loading&&loading.removeSelf(),
null!=params.vending_wait_id&&
network.connectPUT({
chain:"btc",
version:"v1",
method:"tips/"+params.vending_wait_id+"/list/update",
post:{
status:2},

callback:function(result){
globals.console.info("success");
},
onError:function(error){
globals.console.info("failed");
}}),


options.completemessage&&
util.createDialog({
message:L("text_linkage_success"),
buttonNames:[L("label_close")]}).
show(),

options.qrcode||null==params["x-success"]||
Ti.Platform.openURL(params["x-success"]+"://");

},
onError:function(){
null!=loading&&loading.removeSelf(),
util.createDialog({
message:L("text_linkage_failed"),
buttonNames:[L("label_close")]}).
show();
}}));


}

function linkageVerifyUser(params,options){
if("x-success"in params){
var dialog=util.createDialog({
title:L("label_callback_verifyuser"),
message:L("text_callback_verifyuser").format({name:params["x-success"]}),
buttonNames:[L("label_cancel"),L("label_ok")]});

dialog.addEventListener("click",function(e){
e.index==e.source.cancel?























publish(params,options,{failed:!0}):auth.check({title:L("text_authentication"),callback:function(e){if(e.success)try{if("channel"in params){var currentHD=bitcoin.getCurrentHD(),main_address=bitcoin.changeHD(0),sig=bitcoin.signMessage(params.channel);bitcoin.changeHD(currentHD);var data={id:cache.data.id,message:params.channel,signature:sig};publish(params,options,data)}}catch(e){globals.console.info("error: "+e.error)}else publish(params,options,{failed:!0})}});

}),
dialog.show();
}
}

function linkageSignMessage(params,options){
if("x-success"in params){
var dialog=util.createDialog({
title:L("label_callback_signmessage"),
message:L("text_callback_signmessage").format({name:params["x-success"],message:params.msg}),
buttonNames:[L("label_cancel"),L("label_ok")]});

dialog.addEventListener("click",function(e){
e.index==e.source.cancel?





















publish(params,options,{failed:!0}):auth.check({title:L("text_authentication"),callback:function(e){if(e.success)try{if("channel"in params){var address=cache.data.address,sig=bitcoin.signMessage(params.msg),data={address:address,message:params.msg,signature:sig};publish(params,options,data)}}catch(e){globals.console.info("error: "+e.error)}else publish(params,options,{failed:!0})}});

}),
dialog.show();
}
}

function linkageGetAddress(params,options){
if("x-success"in params){
var address=cache.data.address,
address_eth=blockchain.getAddress(),
dialog=util.createDialog({
title:L("label_confirm"),
message:L("text_callback_getaddress").format({address:address,name:params["x-success"]}),
buttonNames:[L("label_cancel"),L("label_confirm")]});

dialog.addEventListener("click",function(e){
e.index==e.source.cancel?(
































globals.lastUrl=null,
publish(params,options,{failed:!0})):auth.check({title:L("text_authentication"),callback:function(e){if(!e.success)publish(params,options,{failed:!0}),!1;else if("msg"in params)try{var sig=blockchain.signMessage(params.msg);if(globals.lastUrl=null,"channel"in params){var data={address:address,message:params.msg,signature:sig};publish(params,options,data)}else Ti.Platform.openURL(params["x-success"]+"://sendaddress?address="+cache.data.address+"&msg="+params.msg+"&sig="+sig),!1}catch(e){globals.console.info("error: "+e.error),!1}else Ti.Platform.openURL(params["x-success"]+"://sendaddress?address="+address),!1}});

}),
dialog.show();
}
}

function linkageQrcode(params,options){
if("x-success"in params){
var dialog=util.createDialog({
title:L("label_callback_qrcode"),
message:L("text_callback_qrcode").format({name:params["x-success"]}),
buttonNames:[L("label_cancel"),L("label_ok")]});

dialog.addEventListener("click",function(e){
e.index==e.source.cancel?

















publish(params,options,{failed:!0}):util.openScanner({callback:function(e){if("channel"in params){var signed=bitcoin.signMessageAnonymous(params.msg),data={address:signed.address,data:e.barcode,message:params.msg,signature:signed.sig};publish(params,options,data)}else Ti.Platform.openURL(params["x-success"]+"://qrcode?data="+e.barcode)}});

}),
dialog.show();
}
}

function linkageAddWebapp(params,options){
"x-success"in params&&
globals.addWebapp({
id:params["x-success"]},
function(result){
if("channel"in params){
var signed=bitcoin.signMessageAnonymous(params.msg),
data={
address:signed.address,
data:result,
signature:signed.sig};

publish(params,options,data);
}
});

}

function screenToSend(params){
var s=setInterval(function(){
if(null!=globals.balances&&null!=globals.tiker){


function gotoScreen(data){



for(var asset=null==data.accept_token?null==data.asset?data.token:data.asset:data.accept_token,send_token=null,i=0;i<globals.balances.length;i++)
if(globals.balances[i].token===asset){
send_token=globals.balances[i];
break;
}

if(null!=send_token){
var data={
asset:send_token.token,
balance:send_token.balance,
address:null==data.destination?data.address:data.destination,
amount:params.amount,
channel:params.channel,
currency:data.currency,
regular_dust_size:params.regular_dust_size};

globals.windows.send.run(data),
null!=params.channel&&(
globals.publich=function(data){
pubsub.publish({
channel:params.channel,
message:JSON.stringify(data),
callback:function(m){
globals.console.info(JSON.stringify(m));
}});

});

}else
util.createDialog({
message:L("label_errortokenfound").format({token:asset}),
buttonNames:[L("label_close")]}).
show();

}clearInterval(s),

null==params.id?
















gotoScreen(params):network.connectGET({chain:"btc",version:"v1",method:"tips/"+params.id+"/info",callback:function(info){gotoScreen(info)},onError:function(error){util.createDialog({title:error.type,message:error.message,buttonNames:[L("label_close")]}).show()}});

}
},100);
}

function screenToDex(params){
if(null!=params.token)

var s=setInterval(function(){
null!=globals.balances&&null!=globals.tiker&&(
clearInterval(s),

globals.showExchange("none"),
globals.setOrderParameters(params.token.toUpperCase(),{
type:params.type||"buy",
amount:params.amount,
price:params.price,
currency:params.currency}));


},100);
}

function screenToWeb(params){
null==params.id||

network.connectGETtoConnects({
method:"services/"+params.id,
callback:function(result){
if(2>result.status&&cache.data.id!==result.user_id){
var dialog=util.createDialog({
title:L("label_error_toweb_differenceaccount"),
message:L("text_error_toweb_differenceaccount"),
buttonNames:[L("label_close")]}).
show();
return;
}
0<result.ios.length?(
!/:\/\//.test(result.ios)&&(result.ios+="://"),
Ti.Platform.openURL(result.ios)):!1,




globals.windows.weblink.run({path:result.base_uri,barColor:result.barcolor||"#009688"});
},
onError:function(error){
Ti.API.info(error);
}});

}

function sweep(params,balances){





































































function doSweep(){
var postParams={
source:params.address,
token:tokens[current].token,
destination:cache.data.address,
quantity:tokens[current].amount,
regular_dust_size:regular_dust_size,
fee:fee,
use_dust_inputs:!0};

network.connectPOST({
chain:"btc",
version:"v1",
method:"transactions/send",
post:postParams,
callback:function(result){
bitcoin.sign(result.unsigned_tx,{
check:{
source:params.address,
destination:cache.data.address,
WIF:params.WIF},

callback:function(signed_tx){
network.connectPOST({
chain:"btc",
version:"v1",
method:"transactions/broadcast",
post:{
tx:signed_tx},

callback:function(result){
index++;
},
onError:function(error){
index=-2,
util.createDialog({
title:error.type,
message:error.message,
buttonNames:[L("label_close")]}).
show();
}});

},
fail:function(error){
null!=loading&&loading.removeSelf(),
util.createDialog({
message:error,
buttonNames:[L("label_close")]}).
show();
}});

},
onError:function(error){
null!=loading&&loading.removeSelf();
var dialog=util.createDialog({
title:error.type,
message:error.message,
buttonNames:[L("label_close")]}).
show();
}});

}var _Mathdivide=Math.divide,_Mathsubtract=Math.subtract;null==params.sweepbtc||"true"!==params.sweepbtc.toLowerCase()?(params.isFullDust=!1,null==params.sweepbtc&&(params.isFullDust=!0),params.sweepbtc=!1):params.sweepbtc=!0;var btc=balances[0];btc.balance=_Mathsubtract(parseFloat(btc.balance),-parseFloat(btc.unconfirmed_balance));var tokens=[];if(!params.sweepbtc){for(var isUnconfirmed=!1,i=1;i<balances.length;i++)if(null==params.asset||balances[i].token==params.asset){var balance=parseFloat(balances[i].balance),unconfirmed_balance=parseFloat(balances[i].unconfirmed_balance);0!=unconfirmed_balance&&(isUnconfirmed=!0),0>unconfirmed_balance&&(balance+=unconfirmed_balance),(null!=params.amount&&balance>=params.amount||0<balance)&&(balance=params.amount||balance,tokens.push({amount:balance,token:balances[i].token}))}if(null!=params.asset&&0>=tokens.length)return void util.createDialog({message:L("label_error_sweepinsufficient").format({token:params.asset}),buttonNames:[L("label_close")]}).show()}var fee=parseFloat(params.fee)||1e4,regular_dust_size=params.sweepbtc||0>=tokens.length?0:5430,tokenlength=0<tokens.length?tokens.length:1,total_token_fee=_Mathdivide((fee+regular_dust_size)*tokenlength,1e8),remaining_btc_value=_Mathsubtract(btc.balance,total_token_fee);if(0>=tokens.length&&0>=btc.balance)return void util.createDialog({message:L("text_error_sweep_empty").format({address:params.address}),buttonNames:[L("label_close")]}).show();if(0>remaining_btc_value)return void util.createDialog({message:L("label_error_sweepinsufficientBTC").format({fee:total_token_fee}),buttonNames:[L("label_close")]}).show();0<tokens.length?params.isFullDust&&(regular_dust_size+=_Mathdivide(Math.multiply(remaining_btc_value,1e8),tokens.length)):tokens.push({token:"BTC",amount:remaining_btc_value});var total_btc_as_dust=_Mathdivide(regular_dust_size*tokens.length,1e8),total_fee=_Mathdivide(fee*tokens.length,1e8),current=-1,index=0,loading=null,

label=params.label||params.address,
feeInCurrency=tiker.to("BTC",total_fee,cache.data.currency),

message=null,
messageFee="\n\n"+L("label_fee")+" "+total_fee+"BTC ("+feeInCurrency+")",
messageBTC="";
0<total_btc_as_dust&&(messageBTC=L("text_sweep_getbtc").format({value:total_btc_as_dust})),

message=null!=params.asset||1==tokens.length?L("text_getconfirmation").format({label:label,amount:tokens[0].amount,token:tokens[0].token})+"\n"+messageBTC+messageFee:L("text_sweepall").format({label:label,count:tokens.length})+messageFee;

var dialog=util.createDialog({
title:L("label_confirm"),
message:message,
buttonNames:[L("label_cancel"),L("label_ok")]});

dialog.addEventListener("click",function(e){
e.index!=e.source.cancel&&
auth.check({title:L("text_confirmsend"),callback:function(e){
if(e.success){
loading=loadingFromInit();
var timer=setInterval(function(){
if(index!=current){

if(current=index,-2==current||current>tokens.length-1){
clearInterval(timer),
null!=loading&&loading.removeSelf(),
null!=params.channel&&globals.publich({status:!0});

var dialog=util.createDialog({
message:L("text_received"),
buttonNames:[L("label_close")]});





return dialog.addEventListener("click",function(e){globals.loadBalance(!0)}),void dialog.show();
}
0<current?
setTimeout(function(){
doSweep();
},2e3):
doSweep();
}
},500);
}
}});

}),
dialog.show();
}

function sweepTokens(params){
if(params.address===cache.data.address){
var dialog=util.createDialog({
message:L("text_error_sweep_sameaddress").format({address:params.address}),
buttonNames:[L("label_close")]}).
show();
return;
}

var loading=loadingFromInit();
network.connectGET({
chain:"btc",
version:"v1",
method:"addresses/"+params.address+"/balances",
callback:function(result){
null!=loading&&loading.removeSelf(),
sweep(params,result);
},
onError:function(error){
null!=loading&&loading.removeSelf();
var dialog=util.createDialog({
title:error.type,
message:error.message,
buttonNames:[L("label_close")]}).
show();
}});

}

function deepLink(url){
globals.windows.weblink.run({
path:url});

}

function authorization(unsigned_hex,func,params,options){
auth.check({title:L("text_authentication"),callback:function(e){
if(!e.success)






















































publish(params,options,{failed:!0});else if("signin"===func){var data={id:cache.data.id,password:cache.data.password};publish(params,options,data)}else if("new_address"===func)globals.addWallet(function(result){globals.console.info("addwallet calback"),globals.console.info(params);var data=null;data=result.status?{id:cache.data.id,address:result.address}:{id:cache.data.id,address:result.action},globals.console.info("publish!"),publish(params,options,data)});else if("sign"===func)if(null!=unsigned_hex&&"object"!=typeof unsigned_hex)bitcoin.sign(unsigned_hex,{check:unpacked,callback:function(signed_tx,isFullySigned){globals.console.info(signed_tx),globals.console.info("isFullySigned="+isFullySigned);var data={signed_tx:signed_tx,isFullySigned:isFullySigned};publish(params,options,data)},fail:function(error){util.createDialog({message:error,buttonNames:[L("label_close")]}).show()}});else if("object"==typeof unsigned_hex){var eth_serialized=ethereum.sign(unsigned_hex),data={signed_tx:"0x"+eth_serialized};publish(params,options,data)}

}});
}

function showDialog(message,unsigned_hex,func,params,options){
var dialog=util.createDialog({
title:L("label_linkage_auth"),
message:message,
buttonNames:[L("label_close"),L("label_ok")]});

dialog.addEventListener("click",function(e){
e.index==e.source.cancel?


publish(params,options,{failed:!0}):authorization(unsigned_hex,func,params,options);

}),
dialog.show();
}

function unpack(unsigned_hex,func,params,options){
if("object"==typeof unsigned_hex){
var
unpacked_message,rawTx=unsigned_hex,

fee=ethereum.calculateFee(rawTx.gasPrice,rawTx.gasLimit);
network.EthereumGET({
chain:"eth",
version:"v1",
method:"tokens/"+rawTx.to,
callback:function(info){
globals.console.info(info);

var unpacked=ethereum.unpackData(rawTx.data,info.decimals);
unpacked_message=L("text_history_send_will").format({quantity:+unpacked.amount,asset:info.symbol,destination:unpacked.to});
},
onError:function(error){
globals.console.info(error),
unpacked_message=L("text_history_send_will").format({quantity:+unpacked.amount,asset:"Ether",destination:unpacked.to});
},
always:function(){
null!=loading&&loading.removeSelf(),
showDialog(L("label_linkage_auth_sign")+"\n-----\n"+unpacked_message+"\n\nGas Price:"+fee.gasPrice+" Ether\nGas Limit:"+fee.gasLimit,unsigned_hex,func,params,options);
}});

}else{
var unpacked_message="";
network.connectPOST({
chain:"eth",
version:"v1",
method:"transactions/unpack",
post:{
tx:unsigned_hex},

callback:function(result){
unpacked=result,
track_params=unpacked;
var feeInBTC=(result.fee/1e8).toFixed2(8),
dustInBTC=(result.dust/1e8).toFixed2(8),
feeInCurrency=tiker.to("BTC",feeInBTC,cache.data.currency),
dustInCurrency=tiker.to("BTC",dustInBTC,cache.data.currency);
unpacked_message=util.getTransactionWillStory(result)+"\n-----\n"+L("label_fee")+" "+feeInBTC+"BTC ("+feeInCurrency+") \nDust:"+dustInBTC+"BTC ("+dustInCurrency+")";
},
onError:function(error){
unpacked_message="unknown";
},
always:function(){
null!=loading&&loading.removeSelf(),
showDialog(L("label_linkage_auth_sign")+"\n-----\n"+unpacked_message,unsigned_hex,func,params,options);
}});

}
}

globals._parseArguments=function(url,options){


if(null==options&&(options={qrcode:!0,completemessage:!0}),null==url)
if(!0)url=Ti.App.getArguments().url;else{
var launchIntent=Ti.App.Android.launchIntent;
null!=launchIntent&&launchIntent.hasExtra("source")&&(
url=launchIntent.getStringExtra("source"),
!url.match(new RegExp("^"+Alloy.CFG.walletapp_uri))&&(
url="casatookan://"+url));


}


if(null==options&&(options={qrcode:!1,completemessage:!1}),url&&
url.match(new RegExp("^"+Alloy.CFG.walletapp_uri)))

return void deepLink(url);



if(globals.console.info(url),url&&(options.qrcode||globals.lastUrl!==url))


if(globals.lastUrl=url,-1<url.indexOf("/instant-verify/")){

var tag=Ti.App.Properties.getString(cache.data.address);(
null==tag||"NULL"==tag)&&(
tag="");

var dialog=util.createDialog({
message:L("text_tokenly_desc").format({address:"\n\n"+tag+"\n"+cache.data.address}),
buttonNames:[L("label_cancel"),L("label_confirm")]});

dialog.addEventListener("click",function(e){
e.index!=e.source.cancel&&
auth.check({title:L("text_authentication"),callback:function(e){
e.success&&
setTimeout(function(){
signAndSendMessageTokenly(url);
},1e3);

}});

}),
dialog.show();
}else if(url.match(/^casatookan:\/\/x-callback-url/)){





for(var
a,scheme=url.replace(/^casatookan:\/\/x-callback-url\//,"").split("?"),func=scheme[0],params=[],p=scheme[1].split("&"),i=0;i<p.length;i++)a=p[i].split("="),
params[a[0]]=decodeURIComponent(a[1]);


var track_params={};

"verifyuser"===func?
linkageVerifyUser(params,options):
"getaddress"===func?
linkageGetAddress(params,options):
"signmessage"===func?
linkageSignMessage(params,options):
"qrcode"===func?
linkageQrcode(params,options):
"add_webapp"===func&&(
track_params=params,
linkageAddWebapp(params,options)),


track_params.func=func;
}else if(url.match(/^casatookan:\/\//)){
var scheme=url.replace(/^casatookan:\/\//,"").split("?"),

func=scheme[0],
params=JSON.parse(decodeURIComponent(scheme[1].split("=")[1])),

track_params={};

if("screen_to"===func)

"send"===params.screen?
screenToSend(params):
"dex"===params.screen?
screenToDex(params):
"web"===params.screen&&
screenToWeb(params),

track_params.screen=params.screen;else

var unsigned_hex=null,
unpacked=null,

s=setInterval(function(){
clearInterval(s);
var auth_message;

"sign"===func?(
loading=loadingFromInit(),
params.unsigned_hex?(
unsigned_hex=params.unsigned_hex,
unpack(params.unsigned_hex,func,params,options)):

pubsub.subscribe({
channel:params.channel+"receive",
connect:function(){},
callback:function(result){
unsigned_hex=result.unsigned_hex,
unpack(unsigned_hex,func,params,options);
},
onError:function(e){
null!=loading&&loading.removeSelf(),
util.createDialog({
message:L("text_linkage_failed"),
buttonNames:[L("label_close")]}).
show();
}})):(



"signin"===func?auth_message=L("label_linkage_auth_signin"):"new_address"===func&&(auth_message=L("label_linkage_auth_new_address")),
showDialog(auth_message,unsigned_hex,func,params,options));

},100);

track_params.func=func;
}else{
var cips=globals._parseCip2(url);

if(null==cips){
var uri=bitcoin.URI(0<=url.indexOf("bitcoin:")?url:"bitcoin:"+url);
if(null!=uri)


return uri.token="BTC",void screenToSend(uri);

url=url.replace(/^bitcoin:/,"counterparty:"),
0>url.indexOf("/counterparty:/")&&(url="counterparty:"+url),
url+=(0>url.indexOf("?")?"?":"&")+"sweepbtc=true",

cips=globals._parseCip2(url);
}
null!=cips&&(
null==cips.WIF?(
null==cips.token&&(cips.token="BTC"),
screenToSend(cips)):

sweepTokens(cips));


}

};