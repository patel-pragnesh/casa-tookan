module.exports=function(){
var self={};

require("vendor/ethereum"),
self.tokenTransferMethod="0xa9059cbb";
var util=require("vendor/ethereumjs-util").ethereumjsutil,
cache=require("requires/cache"),
bip39=globals.bip39,
hdkey=globals.hdkey,
Tx=globals.Tx,
Buffer=globals.Buffer,
hdnode=null,

basePath="m/44'/60'/0'/0/",
account=null;



















































































































































































































































































return self.hexToDecimal=function(hexString){return parseInt(hexString,16)},self.getBasePath=function(){return basePath},self.init=function(passphrase,derive){var password="",masterseed=bip39.mnemonicToSeed(passphrase,password);hdnode=hdkey.fromMasterSeed(masterseed);var d=basePath+"0";null!=derive&&(d=derive),account=hdnode.derivePath(d)},self.changeHD=function(d){self.init(globals.decryptedPassphrase,basePath+d),cache.data.address=self.getAddress(basePath+d),cache.save();var f3=Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory,"qr_address.png");return f3.exists()&&f3.deleteFile(),cache.data.address},self.verifyTransaction=function(params){var errorMessage="";console.log(params);var contractData=params.transaction.data;if(contractData.substring(0,self.tokenTransferMethod.length)==self.tokenTransferMethod)globals.blockchain.API.getToken({contractAddress:params.params.token,callback:function(tokeninfo){var unpackedData=self.unpackData(contractData,parseInt(tokeninfo.decimals));return console.log(unpackedData),params.params.token==params.transaction.to?params.params.to==unpackedData.to?0==params.transaction.value?params.params.amount==unpackedData.amount?params.callback({fees:0}):errorMessage="amount does not match":errorMessage="ether value is not zero":errorMessage="destination does not match destination":errorMessage="destination is not contract address",void params.onError({title:"Error",message:errorMessage})},onError:function(error){return errorMessage="error getting token info",void params.onError({title:"Error",message:errorMessage})},always:function(){}});else{if(params.transaction.to==params.params.to){var decimalAmount=self.hexToDecimal(params.transaction.value),weiAmount=1e18*parseFloat(params.params.amount);weiAmount==decimalAmount?params.callback({fees:0}):errorMessage="amount does not match"}else errorMessage="destination does not match";return void params.onError({title:"Error",message:errorMessage})}},self.getAddressForPath=function(requestedBasePath){globals.setCache(),null==requestedBasePath&&(requestedBasePath=basePath+"0");var cachedAddress=cache.data.addresses.ethereum[requestedBasePath];if(void 0!=cachedAddress)return console.log("cache ethereum"),cachedAddress;var keyPair=hdnode.derivePath(requestedBasePath);return cache.data.addresses.ethereum[requestedBasePath]=keyPair.getWallet().getAddressString(),cache.save(),cache.data.addresses.ethereum[requestedBasePath]},self.getAddress=function(requestedBasePath){null==requestedBasePath&&(requestedBasePath=basePath+"0");var keyPair=hdnode.derivePath(requestedBasePath);return keyPair.getWallet().getAddressString()},self.createHDAddress=function(d){return self.getAddress(basePath+d)},self.getPrivKey=function(requestedBasePath){null==requestedBasePath&&(requestedBasePath=basePath+"0");var keyPair=hdnode.derivePath(requestedBasePath);return keyPair.getWallet().getPrivateKeyString()},self.weiToEther=function(wei){return wei/1e18},self.signMessage=function(rawMsg,requestedBasePath){null==requestedBasePath&&(requestedBasePath=basePath+"0");var keyPair=hdnode.derivePath(requestedBasePath),msgHash=util.addHexPrefix(util.sha3(rawMsg).toString("hex")),privKey=keyPair.getWallet().getPrivateKeyString(),privateKey=new Buffer(privKey.substr(2,privKey.length-2),"hex"),sig=util.ecsign(new Buffer(util.stripHexPrefix(msgHash),"hex"),privateKey),r=util.stripHexPrefix(sig.r.toString("hex")),s=util.stripHexPrefix(sig.s.toString("hex")),v=sig.v;return v=parseInt(v).toString(16),util.addHexPrefix(r+s+v)},self.sign=function(txobj,requestedBasePath){null==requestedBasePath&&(requestedBasePath=basePath+"0"),console.log(requestedBasePath);var keyPair=hdnode.derivePath(requestedBasePath),privkey=keyPair.getWallet().getPrivateKeyString(),tx=new Tx(txobj),privateKey=new Buffer(privkey.substr(2,privkey.length-2),"hex");tx.sign(privateKey);var serializedTx=tx.serialize(),serialized="0x"+serializedTx.toString("hex");return serialized},self.unpackData=function(data,decimals){data=data.replace(/0xa9059cbb/,"");var to="0x"+data.substr(0,64).substr(-40),amount=data.substr(-(decimals+1));return amount=parseInt(amount,16),amount/=Math.pow(10,decimals),{to:to,amount:amount}},self.calculateFee=function(gasPrice,gasLimit){return globals.console.info("gasPrice"),globals.console.info(parseInt(gasPrice,16)),gasPrice=Math.divide(parseInt(gasPrice,16),1e18),globals.console.info(gasPrice),globals.console.info("gasLimit"),gasLimit=parseInt(gasLimit,16),globals.console.info(gasLimit),{gasPrice:gasPrice,gasLimit:gasLimit}},self.addToken=function(contractAddress,tokenInfo){var tokens=Ti.App.Properties.getString(globals.userEthTokens,"empty");console.log(tokens),tokens="empty"==tokens?{}:JSON.parse(tokens);var walletTokens=tokens[cache.data.address];void 0==walletTokens&&(walletTokens={}),walletTokens[contractAddress]=tokenInfo,tokens[cache.data.address]=walletTokens,console.log(tokens),Ti.App.Properties.setString(globals.userEthTokens,JSON.stringify(tokens))},self.removeToken=function(contractAddress){var tokens=Ti.App.Properties.getString(globals.userEthTokens,"empty");delete tokens[cache.data.address][contractAddress],Ti.App.Properties.setString(globals.userEthTokens,JSON.stringify(tokens))},self.getTokens=function(){var tokens=Ti.App.Properties.getString(globals.userEthTokens,"{}");tokens=JSON.parse(tokens);var walletTokens=tokens[cache.data.address];return void 0==walletTokens?{}:walletTokens},self;
}();